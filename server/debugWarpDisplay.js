/*
 * Quick script to smoke-test the public "warp display" queue.
 *
 * Usage:
 *   DEBUG_API_BASE="http://localhost:5050/api/v1" node debugWarpDisplay.js
 *
 * Steps performed:
 *   1. Login with admin credentials defined in .env
 *   2. Create a sample warp profile (if it does not already exist)
 *   3. Create a paid warp transaction ready for display
 *   4. Call /public/display/next to lock the warp for display
 *   5. (Optional) auto-complete the warp after the configured duration
 */

const axios = require('axios');
const crypto = require('crypto');
const config = require('./config/env');

const apiBase = (process.env.DEBUG_API_BASE || `http://localhost:${config.port || 5000}/api/v1`).replace(/\/$/, '');
const adminEmail = config.adminCredentials.email;
const adminPassword = config.adminCredentials.password;

if (!adminEmail || !adminPassword) {
  console.error('Missing ADMIN_EMAIL / ADMIN_PASSWORD in environment.');
  process.exit(1);
}

const CLIENT = axios.create({
  baseURL: apiBase,
  timeout: 15000,
});

const SAMPLE_SECONDS = Number(process.env.DEBUG_DISPLAY_SECONDS || 20);
const AUTO_COMPLETE = process.env.DEBUG_AUTO_COMPLETE !== 'false';

async function login() {
  const response = await CLIENT.post('/admin/login', {
    email: adminEmail,
    password: adminPassword,
  });

  return response.data.token;
}

async function ensureWarpProfile(token, code) {
  try {
    await CLIENT.get(`/warp/${encodeURIComponent(code)}`);
    console.log(`[display-debug] Warp profile ${code} already exists.`);
    return;
  } catch (error) {
    if (error.response?.status !== 404) {
      throw error;
    }
  }

  const response = await CLIENT.post(
    '/admin/warp',
    {
      code,
      name: 'Debug DJ',
      socialLink: 'https://instagram.com/debugdj',
      description: 'Generated by debugWarpDisplay.js',
    },
    {
      headers: {
        Authorization: `Bearer ${token}`,
      },
    }
  );

  console.log('[display-debug] Created warp profile:', response.data.code);
}

async function createPaidTransaction(token, code) {
  const reference = `DBG-${Date.now().toString(36)}`;

  const payload = {
    code,
    customerName: `Debug Warp ${reference}`,
    customerAvatar: 'https://i.pravatar.cc/200?img=12',
    socialLink: 'https://instagram.com/debug_supporter',
    displaySeconds: SAMPLE_SECONDS,
    amount: 199,
    status: 'paid',
    metadata: {
      productDescription: 'Generated via debug script',
      productImage: null,
      reference,
    },
  };

  const response = await CLIENT.post('/transactions', payload, {
    headers: {
      Authorization: `Bearer ${token}`,
    },
  });

  console.log('[display-debug] Created transaction:', response.data.id);
  return response.data.id;
}

async function lockNextWarp() {
  const response = await CLIENT.post('/public/display/next');

  if (response.status === 204) {
    console.log('[display-debug] No warp available in queue.');
    return null;
  }

  console.log('[display-debug] Locked warp for display:');
  console.table({
    id: response.data.id,
    customer: response.data.customerName,
    social: response.data.socialLink,
    seconds: response.data.displaySeconds,
  });

  return response.data;
}

async function completeWarp(id) {
  if (!id) return;
  await CLIENT.post(`/public/display/${encodeURIComponent(id)}/complete`);
  console.log('[display-debug] Marked warp as displayed.');
}

async function main() {
  try {
    console.log(`[display-debug] Using API base: ${apiBase}`);
    const token = await login();
    console.log('[display-debug] Admin login successful.');

    const code = `DBG${crypto.randomBytes(3).toString('hex').toUpperCase()}`;
    await ensureWarpProfile(token, code);

    await createPaidTransaction(token, code);

    const warp = await lockNextWarp();
    if (!warp) {
      return;
    }

    if (AUTO_COMPLETE) {
      console.log(`[display-debug] Auto-completing in ${warp.displaySeconds}s...`);
      setTimeout(async () => {
        try {
          await completeWarp(warp.id);
          console.log('[display-debug] Done.');
        } catch (error) {
          console.error('Auto-complete failed:', error.message);
        } finally {
          process.exit(0);
        }
      }, warp.displaySeconds * 1000 + 250);
    } else {
      console.log('[display-debug] Auto-complete disabled. Run completeWarp manually if needed.');
    }
  } catch (error) {
    if (error.response) {
      console.error('Request failed:', error.response.status, error.response.data);
    } else {
      console.error(error.message);
    }
    process.exit(1);
  }
}

main();
